#!/usr/bin/env bash
# handles aliases and extensions to commands for our terminal.

# funcs.
die() { echo "$1" >&2; exit "${2:-1}"; }

# determine os.
os=$(uname) \
  || die "failed to get operating system"

# setup aliases to autojump to previously visited directories.
alias d="dirs -v"
for index in {0..9}; do alias "$index"="cd +${index}"; done; unset index

# general.
alias zsrc='source $HOME/aliases $HOME/.zshenv $HOME/.zshrc'
case "$os" in
  Darwin)
    alias ls='ls -G'
    alias dotfiles='code "$DOTFILES"'
    alias grep="grep --color=auto"
  ;;
  Linux)
    alias ls='ls --color=auto'                                          # overrides ls to run this default.
    alias dotfiles="nvim \"+cd $DOTFILES\" $DOTFILES"                   # opens dotfiles in IDE.
    alias grep="grep --color=auto"                                      # overrides grep to run this default.
    alias lockscreen="$HOME/system/bin/lock.sh"                         # verbose way to lock the computer.
    alias lock="$HOME/bin/system/lock.sh"                               # shorthand way to locks the computer.
    alias shutdown="shutdown -h now"                                    # shuts down the computer immediately.
    alias restart="shutdown -r now"                                     # restarts the computer immediately.
    alias screenshot="scrot"                                            # takes a screenshot.
    alias olss="firefox $(ls "$HOME/Pictures" | sort -r | head -n1)"    # opens the last screenshot taken in Firefox.
    alias orphans="pacman -Qtdq | sudo pacman -Rns -"                   # removes all orphaned packages.
    alias clock="tty-clock -s -c -C 5 -t"                               # renders a nice clock, using tty-clock, in the terminal.
    alias neofetch="fastfetch"                                          # prints system information.
    alias open="pcmanfm"                                                # opens the given directory in a GUI file manager.
  ;;
esac

# aws overrides.
aws() {
  case $* in

    # what is the AWS IAM Role I am authed to?
    auth)
      command aws sts get-caller-identity ;;

    # what is the ARN of the AWS IAM Role I am authed as?
    who)
      command aws sts get-caller-identity --query "Arn" --output text ;;

    # list ALL the AWS profiles available, including which one is currently authed.
    profiles)
      profile="${AWS_PROFILE:-default}"
      command aws --no-cli-pager configure list-profiles | while read p; do
        prefix="  "; [[ "$p" == "$profile" ]] && prefix=" *"
        echo "$prefix $p"
      done
      ;;

    # resets the AWS_PROFILE to https://www.reddit.com/r/neovim/comments/6rvsa2/nvimdiff/the default profile.
    "profile clear") # resets the AWS_PROFILE to the default profile.
      export AWS_PROFILE="default" ;;

    # logs into the AWS Account associated with the given profile.
    "login "*)
      profile=""
      profiles=$(aws --no-cli-pager configure list-profiles)
      <<< "$profiles" while read -r p; do
        [[ "$p" == "$2" ]] && { profile="$p"; break; }
      done
      if [[ -z "$profile" ]]; then
        echo "$2 is not a valid AWS profile that can be logged into; Please give a valid profile."
      else
        export AWS_PROFILE="$profile"
        command aws sso login
      fi
      ;;

    # a quick way to auth to the given AWS ECR repository, using the ARN.
    "ecr "*.dkr.ecr.*.amazonaws.com*)
      command aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin "$2" ;;

    # run the default command, if none of the above are applicable.
    *)
      command aws "$@" ;;
  esac
}

# git overrides.
git() {
  case $* in

    # checks who the current gh user is.
    "who")
      command gh auth status --active --json hosts --jq '.hosts."github.com"[0]' ;;

    "switch")
      command gh auth switch ;;

    # runs 'git pull' while pruning old branches.
    "pull "*)
      command git pull --prune "$2" ;;

    # runs 'git clone' and then changes into the directory cloned.
    "clone "*)
      command git clone "$2" && cd $(cut -d"/" -f5 <<< "$2") ;;

    # shows all the branches available.
    branch)
      command git branch --all ;;

    # run the default command, if none of the above are applicable.
    *)
      command git "$@" ;;
  esac
}
